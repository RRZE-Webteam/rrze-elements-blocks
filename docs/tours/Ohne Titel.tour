{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "Fixing existing Blocks",
  "steps": [
    {
      "file": "package.json",
      "description": "Step 1: Install all required dependencies by changing into the working directory in your terminal and running ```npm install```.",
      "line": 38,
      "contents": "{\n\t\"name\": \"rrze-elements\",\n\t\"version\": \"1.0.14\",\n\t\"description\": \"RRZE Elements: Gestalterische Erweiterungen für den BlockEditor\",\n\t\"main\": \"build/index.js\",\n\t\"textdomain\": \"rrze-elements-blocks\",\n\t\"license\": \"GPL-3.0-or-later\",\n\t\"private\": true,\n\t\"scripts\": {\n\t\t\"build\": \"wp-scripts build\",\n\t\t\"format\": \"wp-scripts format\",\n\t\t\"lint:css\": \"wp-scripts lint-style\",\n\t\t\"lint\": \"eslint 'src/**/*.{js,jsx,ts,tsx}'\",\n\t\t\"packages-update\": \"wp-scripts packages-update\",\n\t\t\"plugin-zip\": \"wp-scripts plugin-zip\",\n\t\t\"start\": \"wp-scripts start\",\n\t\t\"build-all\": \"node check-compatibility.js && sass src/_shared/scss/rrze-elements-blocks.scss assets/css/rrze-elements-blocks.css && npm run build && npx playwright test\",\n\t\t\"update-version\": \"node update-version.js && npm run build\"\n\t},\n\t\"repository\": {\n\t\t\"type\": \"git\",\n\t\t\"url\": \"https://github.com/RRZE-Webteam/rrze-elements\",\n\t\t\"issues\": \"https://github.com/RRZE-Webteam/rrze-elements/issues\",\n\t\t\"clone\": \"git+https://github.com/RRZE-Webteam/rrze-elements.git\"\n\t},\n\t\"browserslist\": [\n\t\t\"last 3 years\",\n\t\t\"ie 11\"\n\t],\n\t\"supports\": {\n\t\t\"email\": \"webmaster@fau.de\",\n\t\t\"docs\": \"https://www.wordpress.rrze.fau.de/plugins/fau-und-rrze-plugins/elements/\"\n\t},\n\t\"author\": {\n\t\t\"name\": \"RRZE-Webteam <webmaster@fau.de>\",\n\t\t\"url\": \"https://www.wordpress.rrze.fau.de/person/webmaster\"\n\t},\n\t\"devDependencies\": {\n\t\t\"@babel/core\": \"^7.26.0\",\n\t\t\"@babel/preset-env\": \"^7.26.0\",\n\t\t\"@babel/preset-react\": \"^7.26.3\",\n\t\t\"@eslint/eslintrc\": \"^3.2.0\",\n\t\t\"@eslint/js\": \"^9.16.0\",\n\t\t\"@playwright/test\": \"^1.49.1\",\n\t\t\"@svgr/webpack\": \"^8.1.0\",\n\t\t\"@types/color\": \"^4.2.0\",\n\t\t\"@types/lodash\": \"^4.17.13\",\n\t\t\"@types/node\": \"^22.10.2\",\n\t\t\"@types/wordpress__block-editor\": \"^11.5.16\",\n\t\t\"@types/wordpress__blocks\": \"^12.5.16\",\n\t\t\"@typescript-eslint/eslint-plugin\": \"^8.18.0\",\n\t\t\"@typescript-eslint/parser\": \"^8.18.0\",\n\t\t\"@wordpress/api-fetch\": \"^7.14.0\",\n\t\t\"@wordpress/babel-plugin-makepot\": \"^6.14.0\",\n\t\t\"@wordpress/compose\": \"^7.14.0\",\n\t\t\"@wordpress/data\": \"^10.14.0\",\n\t\t\"@wordpress/e2e-test-utils-playwright\": \"^1.14.0\",\n\t\t\"@wordpress/eslint-plugin\": \"^22.0.0\",\n\t\t\"@wordpress/i18n\": \"^5.14.0\",\n\t\t\"@wordpress/icons\": \"^10.14.0\",\n\t\t\"@wordpress/keycodes\": \"^4.14.0\",\n\t\t\"@wordpress/notices\": \"^5.14.0\",\n\t\t\"@wordpress/scripts\": \"^30.7.0\",\n\t\t\"@wordpress/server-side-render\": \"^5.14.0\",\n\t\t\"autoprefixer\": \"^10.4.20\",\n\t\t\"babel-loader\": \"^9.2.1\",\n\t\t\"dotenv\": \"^16.4.7\",\n\t\t\"eslint\": \"^9.16.0\",\n\t\t\"eslint-plugin-react\": \"^7.37.2\",\n\t\t\"eslint-plugin-tsdoc\": \"^0.4.0\",\n\t\t\"inquirer\": \"^12.2.0\",\n\t\t\"prompt\": \"^1.3.0\",\n\t\t\"semver\": \"^7.6.3\",\n\t\t\"ts-loader\": \"^9.5.1\",\n\t\t\"typescript\": \"^5.7.2\"\n\t},\n\t\"dependencies\": {\n\t\t\"@wordpress/a11y\": \"^4.14.0\",\n\t\t\"@wordpress/shortcode\": \"^4.14.0\",\n\t\t\"color\": \"^4.2.3\",\n\t\t\"gsap\": \"^3.12.5\",\n\t\t\"lodash\": \"^4.17.21\",\n\t\t\"react-error-boundary\": \"^4.1.2\"\n\t},\n\t\"resolutions\": {\n\t\t\"postcss\": \"8.4.38\",\n\t\t\"svg-baker\": \"1.7.0\",\n\t\t\"svg-baker-runtime\": \"1.4.7\"\n\t},\n\t\"engines\": {\n\t\t\"node\": \">=21.7.3\",\n\t\t\"npm\": \">=10.8.0\"\n\t}\n}\n"
    },
    {
      "file": "package.json",
      "description": "Step 2: Start the development process via ```npm run start``` - If you are finished with your changes, run ```npm run build-all``` (or ```npm run build``` )",
      "line": 16,
      "contents": "{\n\t\"name\": \"rrze-elements\",\n\t\"version\": \"1.0.14\",\n\t\"description\": \"RRZE Elements: Gestalterische Erweiterungen für den BlockEditor\",\n\t\"main\": \"build/index.js\",\n\t\"textdomain\": \"rrze-elements-blocks\",\n\t\"license\": \"GPL-3.0-or-later\",\n\t\"private\": true,\n\t\"scripts\": {\n\t\t\"build\": \"wp-scripts build\",\n\t\t\"format\": \"wp-scripts format\",\n\t\t\"lint:css\": \"wp-scripts lint-style\",\n\t\t\"lint\": \"eslint 'src/**/*.{js,jsx,ts,tsx}'\",\n\t\t\"packages-update\": \"wp-scripts packages-update\",\n\t\t\"plugin-zip\": \"wp-scripts plugin-zip\",\n\t\t\"start\": \"wp-scripts start\",\n\t\t\"build-all\": \"node check-compatibility.js && sass src/_shared/scss/rrze-elements-blocks.scss assets/css/rrze-elements-blocks.css && npm run build && npx playwright test\",\n\t\t\"update-version\": \"node update-version.js && npm run build\"\n\t},\n\t\"repository\": {\n\t\t\"type\": \"git\",\n\t\t\"url\": \"https://github.com/RRZE-Webteam/rrze-elements\",\n\t\t\"issues\": \"https://github.com/RRZE-Webteam/rrze-elements/issues\",\n\t\t\"clone\": \"git+https://github.com/RRZE-Webteam/rrze-elements.git\"\n\t},\n\t\"browserslist\": [\n\t\t\"last 3 years\",\n\t\t\"ie 11\"\n\t],\n\t\"supports\": {\n\t\t\"email\": \"webmaster@fau.de\",\n\t\t\"docs\": \"https://www.wordpress.rrze.fau.de/plugins/fau-und-rrze-plugins/elements/\"\n\t},\n\t\"author\": {\n\t\t\"name\": \"RRZE-Webteam <webmaster@fau.de>\",\n\t\t\"url\": \"https://www.wordpress.rrze.fau.de/person/webmaster\"\n\t},\n\t\"devDependencies\": {\n\t\t\"@babel/core\": \"^7.26.0\",\n\t\t\"@babel/preset-env\": \"^7.26.0\",\n\t\t\"@babel/preset-react\": \"^7.26.3\",\n\t\t\"@eslint/eslintrc\": \"^3.2.0\",\n\t\t\"@eslint/js\": \"^9.16.0\",\n\t\t\"@playwright/test\": \"^1.49.1\",\n\t\t\"@svgr/webpack\": \"^8.1.0\",\n\t\t\"@types/color\": \"^4.2.0\",\n\t\t\"@types/lodash\": \"^4.17.13\",\n\t\t\"@types/node\": \"^22.10.2\",\n\t\t\"@types/wordpress__block-editor\": \"^11.5.16\",\n\t\t\"@types/wordpress__blocks\": \"^12.5.16\",\n\t\t\"@typescript-eslint/eslint-plugin\": \"^8.18.0\",\n\t\t\"@typescript-eslint/parser\": \"^8.18.0\",\n\t\t\"@wordpress/api-fetch\": \"^7.14.0\",\n\t\t\"@wordpress/babel-plugin-makepot\": \"^6.14.0\",\n\t\t\"@wordpress/compose\": \"^7.14.0\",\n\t\t\"@wordpress/data\": \"^10.14.0\",\n\t\t\"@wordpress/e2e-test-utils-playwright\": \"^1.14.0\",\n\t\t\"@wordpress/eslint-plugin\": \"^22.0.0\",\n\t\t\"@wordpress/i18n\": \"^5.14.0\",\n\t\t\"@wordpress/icons\": \"^10.14.0\",\n\t\t\"@wordpress/keycodes\": \"^4.14.0\",\n\t\t\"@wordpress/notices\": \"^5.14.0\",\n\t\t\"@wordpress/scripts\": \"^30.7.0\",\n\t\t\"@wordpress/server-side-render\": \"^5.14.0\",\n\t\t\"autoprefixer\": \"^10.4.20\",\n\t\t\"babel-loader\": \"^9.2.1\",\n\t\t\"dotenv\": \"^16.4.7\",\n\t\t\"eslint\": \"^9.16.0\",\n\t\t\"eslint-plugin-react\": \"^7.37.2\",\n\t\t\"eslint-plugin-tsdoc\": \"^0.4.0\",\n\t\t\"inquirer\": \"^12.2.0\",\n\t\t\"prompt\": \"^1.3.0\",\n\t\t\"semver\": \"^7.6.3\",\n\t\t\"ts-loader\": \"^9.5.1\",\n\t\t\"typescript\": \"^5.7.2\"\n\t},\n\t\"dependencies\": {\n\t\t\"@wordpress/a11y\": \"^4.14.0\",\n\t\t\"@wordpress/shortcode\": \"^4.14.0\",\n\t\t\"color\": \"^4.2.3\",\n\t\t\"gsap\": \"^3.12.5\",\n\t\t\"lodash\": \"^4.17.21\",\n\t\t\"react-error-boundary\": \"^4.1.2\"\n\t},\n\t\"resolutions\": {\n\t\t\"postcss\": \"8.4.38\",\n\t\t\"svg-baker\": \"1.7.0\",\n\t\t\"svg-baker-runtime\": \"1.4.7\"\n\t},\n\t\"engines\": {\n\t\t\"node\": \">=21.7.3\",\n\t\t\"npm\": \">=10.8.0\"\n\t}\n}\n"
    },
    {
      "file": "package.json",
      "description": "Step 3: Make sure to bump up the version number and update it throughout the plugin via ```npm run update-version```. Readme.txt and readme.md need to be updated manually.",
      "line": 3,
      "contents": "{\n\t\"name\": \"rrze-elements\",\n\t\"version\": \"1.0.14\",\n\t\"description\": \"RRZE Elements: Gestalterische Erweiterungen für den BlockEditor\",\n\t\"main\": \"build/index.js\",\n\t\"textdomain\": \"rrze-elements-blocks\",\n\t\"license\": \"GPL-3.0-or-later\",\n\t\"private\": true,\n\t\"scripts\": {\n\t\t\"build\": \"wp-scripts build\",\n\t\t\"format\": \"wp-scripts format\",\n\t\t\"lint:css\": \"wp-scripts lint-style\",\n\t\t\"lint\": \"eslint 'src/**/*.{js,jsx,ts,tsx}'\",\n\t\t\"packages-update\": \"wp-scripts packages-update\",\n\t\t\"plugin-zip\": \"wp-scripts plugin-zip\",\n\t\t\"start\": \"wp-scripts start\",\n\t\t\"build-all\": \"node check-compatibility.js && sass src/_shared/scss/rrze-elements-blocks.scss assets/css/rrze-elements-blocks.css && npm run build && npx playwright test\",\n\t\t\"update-version\": \"node update-version.js && npm run build\"\n\t},\n\t\"repository\": {\n\t\t\"type\": \"git\",\n\t\t\"url\": \"https://github.com/RRZE-Webteam/rrze-elements\",\n\t\t\"issues\": \"https://github.com/RRZE-Webteam/rrze-elements/issues\",\n\t\t\"clone\": \"git+https://github.com/RRZE-Webteam/rrze-elements.git\"\n\t},\n\t\"browserslist\": [\n\t\t\"last 3 years\",\n\t\t\"ie 11\"\n\t],\n\t\"supports\": {\n\t\t\"email\": \"webmaster@fau.de\",\n\t\t\"docs\": \"https://www.wordpress.rrze.fau.de/plugins/fau-und-rrze-plugins/elements/\"\n\t},\n\t\"author\": {\n\t\t\"name\": \"RRZE-Webteam <webmaster@fau.de>\",\n\t\t\"url\": \"https://www.wordpress.rrze.fau.de/person/webmaster\"\n\t},\n\t\"devDependencies\": {\n\t\t\"@babel/core\": \"^7.26.0\",\n\t\t\"@babel/preset-env\": \"^7.26.0\",\n\t\t\"@babel/preset-react\": \"^7.26.3\",\n\t\t\"@eslint/eslintrc\": \"^3.2.0\",\n\t\t\"@eslint/js\": \"^9.16.0\",\n\t\t\"@playwright/test\": \"^1.49.1\",\n\t\t\"@svgr/webpack\": \"^8.1.0\",\n\t\t\"@types/color\": \"^4.2.0\",\n\t\t\"@types/lodash\": \"^4.17.13\",\n\t\t\"@types/node\": \"^22.10.2\",\n\t\t\"@types/wordpress__block-editor\": \"^11.5.16\",\n\t\t\"@types/wordpress__blocks\": \"^12.5.16\",\n\t\t\"@typescript-eslint/eslint-plugin\": \"^8.18.0\",\n\t\t\"@typescript-eslint/parser\": \"^8.18.0\",\n\t\t\"@wordpress/api-fetch\": \"^7.14.0\",\n\t\t\"@wordpress/babel-plugin-makepot\": \"^6.14.0\",\n\t\t\"@wordpress/compose\": \"^7.14.0\",\n\t\t\"@wordpress/data\": \"^10.14.0\",\n\t\t\"@wordpress/e2e-test-utils-playwright\": \"^1.14.0\",\n\t\t\"@wordpress/eslint-plugin\": \"^22.0.0\",\n\t\t\"@wordpress/i18n\": \"^5.14.0\",\n\t\t\"@wordpress/icons\": \"^10.14.0\",\n\t\t\"@wordpress/keycodes\": \"^4.14.0\",\n\t\t\"@wordpress/notices\": \"^5.14.0\",\n\t\t\"@wordpress/scripts\": \"^30.7.0\",\n\t\t\"@wordpress/server-side-render\": \"^5.14.0\",\n\t\t\"autoprefixer\": \"^10.4.20\",\n\t\t\"babel-loader\": \"^9.2.1\",\n\t\t\"dotenv\": \"^16.4.7\",\n\t\t\"eslint\": \"^9.16.0\",\n\t\t\"eslint-plugin-react\": \"^7.37.2\",\n\t\t\"eslint-plugin-tsdoc\": \"^0.4.0\",\n\t\t\"inquirer\": \"^12.2.0\",\n\t\t\"prompt\": \"^1.3.0\",\n\t\t\"semver\": \"^7.6.3\",\n\t\t\"ts-loader\": \"^9.5.1\",\n\t\t\"typescript\": \"^5.7.2\"\n\t},\n\t\"dependencies\": {\n\t\t\"@wordpress/a11y\": \"^4.14.0\",\n\t\t\"@wordpress/shortcode\": \"^4.14.0\",\n\t\t\"color\": \"^4.2.3\",\n\t\t\"gsap\": \"^3.12.5\",\n\t\t\"lodash\": \"^4.17.21\",\n\t\t\"react-error-boundary\": \"^4.1.2\"\n\t},\n\t\"resolutions\": {\n\t\t\"postcss\": \"8.4.38\",\n\t\t\"svg-baker\": \"1.7.0\",\n\t\t\"svg-baker-runtime\": \"1.4.7\"\n\t},\n\t\"engines\": {\n\t\t\"node\": \">=21.7.3\",\n\t\t\"npm\": \">=10.8.0\"\n\t}\n}\n"
    },
    {
      "file": "src/blocks/alert/edit.tsx",
      "description": "Blocks can be always found in the src/blocks-directory.\n\nThis is the Edit.tsx-File. This file controls the Editor behavior of the block.\nWe are using TypeScript to reduce errors during the development process.",
      "line": 1,
      "contents": "import {\n  TextControl,\n  PanelBody,\n  __experimentalText as Text,\n  __experimentalSpacer as Spacer,\n} from \"@wordpress/components\";\nimport {\n  useBlockProps,\n  InnerBlocks,\n  InspectorControls,\n  BlockControls,\n  ContrastChecker,\n} from \"@wordpress/block-editor\";\n\nimport { __ } from \"@wordpress/i18n\";\nimport { useDispatch } from \"@wordpress/data\";\nimport { store as blockEditorStore } from \"@wordpress/block-editor\";\nimport {\n  StandardColorSwitcher,\n  StandardColorSwitcherToolbar,\n  BorderColorPicker,\n} from \"../../components/CustomColorSwitcher\";\n\ninterface EditProps {\n  attributes: {\n    style?: string;\n    color: string;\n    textColor?: string;\n    borderColor?: string;\n    title?: string;\n  };\n  setAttributes: (attributes: Partial<EditProps[\"attributes\"]>) => void;\n  clientId: string;\n  context: { [key: string]: any };\n  blockProps: any;\n}\n\nexport default function Edit({\n  attributes,\n  setAttributes,\n}: EditProps) {\n  const props = useBlockProps();\n\n  // Data for color options\n  const colorDataAlert = [\n    {\n      color: \"#e9edf2\",\n      slug: \"default\",\n      name: __(\"Default\", \"rrze-elements-blocks\"),\n    },\n    {\n      color: \"#dff0d8\",\n      slug: \"success\",\n      name: __(\"Success\", \"rrze-elements-blocks\"),\n    },\n    {\n      color: \"#d9edf7\",\n      slug: \"info\",\n      name: __(\"Info\", \"rrze-elements-blocks\"),\n    },\n    {\n      color: \"#fcf8e3\",\n      slug: \"warning\",\n      name: __(\"Warning\", \"rrze-elements-blocks\"),\n    },\n    {\n      color: \"#f2dede\",\n      slug: \"danger\",\n      name: __(\"Danger\", \"rrze-elements-blocks\"),\n    },\n  ];\n\n  let borderStyle = attributes.borderColor\n    ? { border: `1px solid ${attributes.borderColor}` }\n    : {};\n  if (attributes.style === \"example\") {\n    borderStyle = { border: `1px dashed var(--color-TextLight, #707070)` };\n  }\n\n  const { __unstableMarkNextChangeAsNotPersistent } =\n    useDispatch(blockEditorStore);\n  const onChangeTitle = (newText: string) => {\n    if (newText === \"\") {\n      __unstableMarkNextChangeAsNotPersistent();\n      setAttributes({ title: \"\", style:\"default\" });\n    } else {\n      __unstableMarkNextChangeAsNotPersistent();\n      setAttributes({ title: newText, style: \"example\"});\n    }\n  };\n\n  return (\n    <div {...props}>\n      <InspectorControls>\n        <StandardColorSwitcher\n          attributes={{ color: attributes.color }}\n          setAttributes={setAttributes}\n          colorData={colorDataAlert}\n          hex={true}\n          useStyle={true}\n          customColor={false}\n          useTextColor={true}\n        />\n        <ContrastChecker\n          textColor={attributes.textColor}\n          backgroundColor={attributes.color}\n        />\n\n        {attributes.style ? null : (\n          <BorderColorPicker\n            attributes={{ color: attributes.borderColor }}\n            setAttributes={setAttributes}\n          />\n        )}\n        <PanelBody\n          title={__(\"Label settings\", \"rrze-elements-blocks\")}\n          initialOpen={true}\n        >\n          <Spacer>\n            <Text>{__(\"Add a Label for your Alert. This changes the style to example\", \"rrze-elements-blocks\")}</Text>\n          </Spacer>\n\n          <TextControl\n            value={attributes.title}\n            onChange={onChangeTitle}\n            placeholder={__(\"Add a Label\", \"rrze-elements-blocks\")}\n            className=\"elements-blocks-input-following-icon\"\n          />\n        </PanelBody>\n      </InspectorControls>\n      <BlockControls>\n        <StandardColorSwitcherToolbar\n          attributes={{ color: attributes.color, style: attributes.style }}\n          setAttributes={setAttributes}\n          colorData={colorDataAlert}\n          hex={true}\n          useStyle={true}\n        />\n      </BlockControls>\n      <div\n        className={`alert clearfix clear ${\n          attributes.style ? `alert-${attributes.style}` : \"\"\n        }`}\n        style={{\n          ...(attributes.style\n            ? {}\n            : {\n                backgroundColor: attributes.color,\n                color: attributes.textColor,\n              }),\n          ...borderStyle,\n        }}\n        title={attributes.title}\n      >\n        <InnerBlocks\n          template={[\n            [\n              \"core/paragraph\",\n              { placeholder: __(\"Add a description…\", \"rrze-elements-blocks\") },\n            ],\n          ]}\n          allowedBlocks={[\"core/paragraph\", \"core/heading\", \"core/list\"]}\n          templateLock={false}\n        />\n      </div>\n    </div>\n  );\n}\n"
    },
    {
      "file": "src/blocks/alert/editor.scss",
      "description": "Styling for the backend. It imports the Frontent Styling partially from src/_shared/scss/alert.",
      "line": 1,
      "contents": "@import \"../../_shared/scss/alert\";\n\n.alert {\n    line-height: 1.5;\n    & p {\n        margin: 0;\n    }\n}\n\n.rrzeElementsBFakColorSelector{\n    &.dff0d8{\n        background-color: #dff0d8;\n    }\n    &.e9edf2{\n        background-color: #e9edf2;\n    }\n    &.d9edf7{\n        background-color: #d9edf7;\n    }\n    &.fcf8e3{\n        background-color: #fcf8e3;\n    }\n    &.f2dede{\n        background-color: #f2dede;\n    }\n}\n\np, h1, h2, h3, h4, h5, h6, span {\n    font-family: 'Roboto', sans-serif;\n}\n"
    },
    {
      "file": "src/blocks/alert/index.tsx",
      "description": "The index.tsx brings all together. We can see that we reference the edit.tsx and save.tsx in here",
      "line": 35,
      "contents": "import { registerBlockType } from \"@wordpress/blocks\";\n\nimport Edit from \"./edit\";\nimport save from \"./save\";\nimport metadata from \"./block.json\";\nimport transforms from \"./transforms\";\nimport \"./editor.scss\";\n\nregisterBlockType(\n  metadata.name as any,\n  {\n    /**\n     * Used to construct a preview for the block to be shown in the block inserter.\n     */\n    icon: {\n      src: (\n        <svg\n          id=\"Ebene_1\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          viewBox=\"0 0 512 512\"\n        >\n          <rect\n            x=\"75.86\"\n            y=\"231.31\"\n            width=\"360.28\"\n            height=\"49.39\"\n            rx=\"5.73\"\n            ry=\"5.73\"\n            fillRule=\"evenodd\"\n            strokeWidth=\"0\"\n          />\n        </svg>\n      ),\n    },\n    /**\n     * @see ./edit.js\n     */\n    edit: Edit,\n\n    /**\n     * @see ./save.js\n     */\n    save,\n    transforms: transforms,\n  } as any,\n);\n"
    },
    {
      "file": "src/blocks/alert/index.tsx",
      "description": "We can also see, that there is a Transformation set via transforms.ts",
      "line": 44,
      "contents": "import { registerBlockType } from \"@wordpress/blocks\";\n\nimport Edit from \"./edit\";\nimport save from \"./save\";\nimport metadata from \"./block.json\";\nimport transforms from \"./transforms\";\nimport \"./editor.scss\";\n\nregisterBlockType(\n  metadata.name as any,\n  {\n    /**\n     * Used to construct a preview for the block to be shown in the block inserter.\n     */\n    icon: {\n      src: (\n        <svg\n          id=\"Ebene_1\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          viewBox=\"0 0 512 512\"\n        >\n          <rect\n            x=\"75.86\"\n            y=\"231.31\"\n            width=\"360.28\"\n            height=\"49.39\"\n            rx=\"5.73\"\n            ry=\"5.73\"\n            fillRule=\"evenodd\"\n            strokeWidth=\"0\"\n          />\n        </svg>\n      ),\n    },\n    /**\n     * @see ./edit.js\n     */\n    edit: Edit,\n\n    /**\n     * @see ./save.js\n     */\n    save,\n    transforms: transforms,\n  } as any,\n);\n"
    },
    {
      "file": "src/blocks/alert/block.json",
      "description": "The attributes of the plugin. Whenever you change one of those, make sure that you remember to add a Deprecation via WordPress Deprecation API! This is mandatory (even if it is no fun)",
      "line": 9,
      "contents": "{\n  \"$schema\": \"https://schemas.wp.org/trunk/block.json\",\n  \"apiVersion\": 3,\n  \"name\": \"rrze-elements/alert\",\n  \"version\": \"1.0.13\",\n  \"title\": \"Alert\",\n  \"category\": \"rrze_elements\",\n  \"description\": \"Used to highlight important information and warnings.\",\n  \"attributes\": {\n    \"style\": {\n      \"type\": \"string\",\n      \"default\": \"default\"\n    },\n    \"color\": {\n      \"type\": \"string\",\n      \"default\": \"#e9edf2\"\n    },\n    \"border_color\": {\n      \"type\": \"string\",\n      \"default\": \"\"\n    },\n    \"title\": {\n      \"type\": \"string\",\n      \"default\": \"\"\n    },\n    \"textColor\": {\n      \"type\": \"string\",\n      \"default\": \"#000000\"\n    },\n    \"borderColor\": {\n      \"type\": \"string\",\n      \"default\": \"\"\n    }\n  },\n  \"example\": {\n    \"attributes\": {\n      \"style\": \"success\",\n      \"color\": \"#e9edf2\",\n      \"border_color\": \"\",\n      \"title\": \"Alert\",\n      \"textColor\": \"#000000\",\n      \"borderColor\": \"\"\n    },\n    \"innerBlocks\": [\n      {\n        \"name\": \"core/paragraph\",\n        \"attributes\": {\n          \"content\": \"This is an alert box.\"\n        }\n      }\n    ]\n  },\n  \"supports\": {\n    \"html\": false\n  },\n  \"textdomain\": \"rrze-elements-blocks\",\n  \"editorScript\": \"file:./index.js\",\n  \"editorStyle\": \"file:./index.css\",\n  \"style\": \"file:./style-index.css\"\n}"
    },
    {
      "file": "src/blocks/alert/block.json",
      "description": "The textdomain of our plugin",
      "line": 56,
      "contents": "{\n  \"$schema\": \"https://schemas.wp.org/trunk/block.json\",\n  \"apiVersion\": 3,\n  \"name\": \"rrze-elements/alert\",\n  \"version\": \"1.0.13\",\n  \"title\": \"Alert\",\n  \"category\": \"rrze_elements\",\n  \"description\": \"Used to highlight important information and warnings.\",\n  \"attributes\": {\n    \"style\": {\n      \"type\": \"string\",\n      \"default\": \"default\"\n    },\n    \"color\": {\n      \"type\": \"string\",\n      \"default\": \"#e9edf2\"\n    },\n    \"border_color\": {\n      \"type\": \"string\",\n      \"default\": \"\"\n    },\n    \"title\": {\n      \"type\": \"string\",\n      \"default\": \"\"\n    },\n    \"textColor\": {\n      \"type\": \"string\",\n      \"default\": \"#000000\"\n    },\n    \"borderColor\": {\n      \"type\": \"string\",\n      \"default\": \"\"\n    }\n  },\n  \"example\": {\n    \"attributes\": {\n      \"style\": \"success\",\n      \"color\": \"#e9edf2\",\n      \"border_color\": \"\",\n      \"title\": \"Alert\",\n      \"textColor\": \"#000000\",\n      \"borderColor\": \"\"\n    },\n    \"innerBlocks\": [\n      {\n        \"name\": \"core/paragraph\",\n        \"attributes\": {\n          \"content\": \"This is an alert box.\"\n        }\n      }\n    ]\n  },\n  \"supports\": {\n    \"html\": false\n  },\n  \"textdomain\": \"rrze-elements-blocks\",\n  \"editorScript\": \"file:./index.js\",\n  \"editorStyle\": \"file:./index.css\",\n  \"style\": \"file:./style-index.css\"\n}"
    },
    {
      "file": "src/blocks/alert/save.tsx",
      "description": "Our save-Function. It runs every time the Editor autosaves, or whenever a user opens the editor to retrieve the content.\nWhenever you change the save.tsx, remember to add a deprecation Array via WordPress Deprecation API. This is mandatory.\n\nDon't do complex computation inside the save.tsx. Instead rely on the attributes available.",
      "line": 14,
      "contents": "import { useBlockProps, InnerBlocks } from \"@wordpress/block-editor\";\nimport type { CSSProperties } from 'react';\n\ninterface SaveProps {\n  attributes: {\n    style?: string;\n    color?: string;\n    title?: string;\n    textColor?: string;\n    borderColor?: string;\n  };\n}\n\nexport default function save({ attributes }: SaveProps) {\n  const blockProps = useBlockProps.save();\n\n  const createStyleObject = () => {\n    if (attributes.style) {\n      return {};\n    }\n\n    const styleObj: CSSProperties = {\n      backgroundColor: attributes.color,\n      color: attributes.textColor,\n    };\n\n    if (attributes.borderColor) {\n      styleObj.border = `1px solid ${attributes.borderColor}`;\n    }\n\n    return styleObj;\n  };\n\n  const createTitle = () => {\n    if (attributes.title && attributes.style === \"example\") {\n      return attributes.title.replace(/\"/g, \"&quot;\");\n    }\n    return undefined;\n  };\n\n  return (\n    <div {...blockProps}>\n      <div \n        className={`alert clearfix clear ${attributes.style ? `alert-${attributes.style}` : ''}`}\n        style={createStyleObject()}\n        title={createTitle()}\n      >\n        <InnerBlocks.Content />\n      </div>\n    </div>\n  );\n}\n"
    },
    {
      "file": "src/blocks/alert/transforms.ts",
      "description": "transforms allow conversion from one block to another.",
      "line": 22,
      "contents": "import { createBlock, BlockInstance } from \"@wordpress/blocks\";\nimport metadata from \"./block.json\";\ninterface ShortcodeAttributes {\n  named: {\n    style?: string;\n    title?: string;\n    color?: string;\n  };\n  content: string;\n  numeric: any[];\n}\n\ninterface ShortcodeTransformAttributes {\n  named: {\n    style?: string;\n    title?: string;\n  };\n  style: string;\n  content: string;\n}\n\nconst transforms = {\n  from: [\n    {\n      type: \"shortcode\",\n      tag: \"alert\",\n      attributes: {\n        style: {\n          type: \"string\",\n          shortcode: (attrs: ShortcodeAttributes) => {\n            if (\n              [\"success\", \"danger\", \"default\", \"info\", \"warning\"].includes(\n                attrs.named.style,\n              )\n            ) {\n              return attrs.named.style;\n            } else {\n              return \"info\";\n            }\n          },\n        },\n        content: {\n          type: \"string\",\n          shortcode: (\n            attrs: ShortcodeAttributes,\n            { content }: { content: string },\n          ) => {\n            return content;\n          },\n        },\n      },\n      transform: (attributes: ShortcodeTransformAttributes, data: any) => {\n        let cleanData = data.shortcode?.content;\n        const styleChoice = (style: string) => {\n          switch (style) {\n            case \"success\":\n              return \"success\";\n            case \"danger\":\n              return \"danger\";\n            case \"default\":\n              return \"default\";\n            case \"info\":\n              return \"info\";\n            case \"warning\":\n              return \"warning\";\n            case \"example\":\n              return \"example\";\n            default:\n              return \"\";\n          }\n        };\n        // console.log('cleaned data:', cleanData);\n        const blockContent = createBlock(\"core/freeform\", {\n          content: cleanData,\n        });\n        return createBlock(\n          metadata.name,\n          {\n            style: styleChoice(attributes.named.style),\n            title: attributes.named.title,\n          },\n          [blockContent],\n        );\n      },\n    },\n    {\n      type: 'block' as const,\n      isMultiBlock: true,\n      blocks: [\"core/paragraph\"],\n      isMatch: (_attributes: any, blocks: any) => {\n        return !blocks.some((block: any) => block.name === 'rrze-elements/alert');\n      },\n\n      __experimentalConvert: (blocks: BlockInstance[]) => {\n        const columns: BlockInstance[] = [];\n\n        blocks.forEach((block) => {\n          columns.push(\n            createBlock(\n              block.name,\n              block.attributes,\n              block.innerBlocks\n            )\n          );\n        });\n\n        return createBlock<any>(\n          'rrze-elements/alert',\n          {},\n          columns\n        );\n      },\n    },\n  ],\n  to: [\n    {\n      type: 'block' as const,\n      blocks: ['core/paragraph'],\n      transform: (\n        attributes: any,\n        innerBlocks: BlockInstance[]\n      ): BlockInstance[] => {\n        return innerBlocks;\n      },\n    },\n  ],\n};\n\nexport default transforms;\n"
    },
    {
      "file": "src/blocks/alert/transforms.ts",
      "description": "From shortcode [alert] to this block.",
      "line": 25,
      "contents": "import { createBlock, BlockInstance } from \"@wordpress/blocks\";\nimport metadata from \"./block.json\";\ninterface ShortcodeAttributes {\n  named: {\n    style?: string;\n    title?: string;\n    color?: string;\n  };\n  content: string;\n  numeric: any[];\n}\n\ninterface ShortcodeTransformAttributes {\n  named: {\n    style?: string;\n    title?: string;\n  };\n  style: string;\n  content: string;\n}\n\nconst transforms = {\n  from: [\n    {\n      type: \"shortcode\",\n      tag: \"alert\",\n      attributes: {\n        style: {\n          type: \"string\",\n          shortcode: (attrs: ShortcodeAttributes) => {\n            if (\n              [\"success\", \"danger\", \"default\", \"info\", \"warning\"].includes(\n                attrs.named.style,\n              )\n            ) {\n              return attrs.named.style;\n            } else {\n              return \"info\";\n            }\n          },\n        },\n        content: {\n          type: \"string\",\n          shortcode: (\n            attrs: ShortcodeAttributes,\n            { content }: { content: string },\n          ) => {\n            return content;\n          },\n        },\n      },\n      transform: (attributes: ShortcodeTransformAttributes, data: any) => {\n        let cleanData = data.shortcode?.content;\n        const styleChoice = (style: string) => {\n          switch (style) {\n            case \"success\":\n              return \"success\";\n            case \"danger\":\n              return \"danger\";\n            case \"default\":\n              return \"default\";\n            case \"info\":\n              return \"info\";\n            case \"warning\":\n              return \"warning\";\n            case \"example\":\n              return \"example\";\n            default:\n              return \"\";\n          }\n        };\n        // console.log('cleaned data:', cleanData);\n        const blockContent = createBlock(\"core/freeform\", {\n          content: cleanData,\n        });\n        return createBlock(\n          metadata.name,\n          {\n            style: styleChoice(attributes.named.style),\n            title: attributes.named.title,\n          },\n          [blockContent],\n        );\n      },\n    },\n    {\n      type: 'block' as const,\n      isMultiBlock: true,\n      blocks: [\"core/paragraph\"],\n      isMatch: (_attributes: any, blocks: any) => {\n        return !blocks.some((block: any) => block.name === 'rrze-elements/alert');\n      },\n\n      __experimentalConvert: (blocks: BlockInstance[]) => {\n        const columns: BlockInstance[] = [];\n\n        blocks.forEach((block) => {\n          columns.push(\n            createBlock(\n              block.name,\n              block.attributes,\n              block.innerBlocks\n            )\n          );\n        });\n\n        return createBlock<any>(\n          'rrze-elements/alert',\n          {},\n          columns\n        );\n      },\n    },\n  ],\n  to: [\n    {\n      type: 'block' as const,\n      blocks: ['core/paragraph'],\n      transform: (\n        attributes: any,\n        innerBlocks: BlockInstance[]\n      ): BlockInstance[] => {\n        return innerBlocks;\n      },\n    },\n  ],\n};\n\nexport default transforms;\n"
    },
    {
      "file": "src/blocks/alert/transforms.ts",
      "description": "Or from paragraph-blocks to this block. Multi-Select allows selection of several paragraphs for example...\n\nThis is not mandatory. But it is nice to have to increase UX",
      "line": 87,
      "contents": "import { createBlock, BlockInstance } from \"@wordpress/blocks\";\nimport metadata from \"./block.json\";\ninterface ShortcodeAttributes {\n  named: {\n    style?: string;\n    title?: string;\n    color?: string;\n  };\n  content: string;\n  numeric: any[];\n}\n\ninterface ShortcodeTransformAttributes {\n  named: {\n    style?: string;\n    title?: string;\n  };\n  style: string;\n  content: string;\n}\n\nconst transforms = {\n  from: [\n    {\n      type: \"shortcode\",\n      tag: \"alert\",\n      attributes: {\n        style: {\n          type: \"string\",\n          shortcode: (attrs: ShortcodeAttributes) => {\n            if (\n              [\"success\", \"danger\", \"default\", \"info\", \"warning\"].includes(\n                attrs.named.style,\n              )\n            ) {\n              return attrs.named.style;\n            } else {\n              return \"info\";\n            }\n          },\n        },\n        content: {\n          type: \"string\",\n          shortcode: (\n            attrs: ShortcodeAttributes,\n            { content }: { content: string },\n          ) => {\n            return content;\n          },\n        },\n      },\n      transform: (attributes: ShortcodeTransformAttributes, data: any) => {\n        let cleanData = data.shortcode?.content;\n        const styleChoice = (style: string) => {\n          switch (style) {\n            case \"success\":\n              return \"success\";\n            case \"danger\":\n              return \"danger\";\n            case \"default\":\n              return \"default\";\n            case \"info\":\n              return \"info\";\n            case \"warning\":\n              return \"warning\";\n            case \"example\":\n              return \"example\";\n            default:\n              return \"\";\n          }\n        };\n        // console.log('cleaned data:', cleanData);\n        const blockContent = createBlock(\"core/freeform\", {\n          content: cleanData,\n        });\n        return createBlock(\n          metadata.name,\n          {\n            style: styleChoice(attributes.named.style),\n            title: attributes.named.title,\n          },\n          [blockContent],\n        );\n      },\n    },\n    {\n      type: 'block' as const,\n      isMultiBlock: true,\n      blocks: [\"core/paragraph\"],\n      isMatch: (_attributes: any, blocks: any) => {\n        return !blocks.some((block: any) => block.name === 'rrze-elements/alert');\n      },\n\n      __experimentalConvert: (blocks: BlockInstance[]) => {\n        const columns: BlockInstance[] = [];\n\n        blocks.forEach((block) => {\n          columns.push(\n            createBlock(\n              block.name,\n              block.attributes,\n              block.innerBlocks\n            )\n          );\n        });\n\n        return createBlock<any>(\n          'rrze-elements/alert',\n          {},\n          columns\n        );\n      },\n    },\n  ],\n  to: [\n    {\n      type: 'block' as const,\n      blocks: ['core/paragraph'],\n      transform: (\n        attributes: any,\n        innerBlocks: BlockInstance[]\n      ): BlockInstance[] => {\n        return innerBlocks;\n      },\n    },\n  ],\n};\n\nexport default transforms;\n"
    },
    {
      "file": "src/blocks/alert/edit.tsx",
      "description": "Inside Edit.tsx return-statement we can see what components are used and output inside our block for the Editor-view.",
      "line": 92,
      "contents": "import {\n  TextControl,\n  PanelBody,\n  __experimentalText as Text,\n  __experimentalSpacer as Spacer,\n} from \"@wordpress/components\";\nimport {\n  useBlockProps,\n  InnerBlocks,\n  InspectorControls,\n  BlockControls,\n  ContrastChecker,\n} from \"@wordpress/block-editor\";\n\nimport { __ } from \"@wordpress/i18n\";\nimport { useDispatch } from \"@wordpress/data\";\nimport { store as blockEditorStore } from \"@wordpress/block-editor\";\nimport {\n  StandardColorSwitcher,\n  StandardColorSwitcherToolbar,\n  BorderColorPicker,\n} from \"../../components/CustomColorSwitcher\";\n\ninterface EditProps {\n  attributes: {\n    style?: string;\n    color: string;\n    textColor?: string;\n    borderColor?: string;\n    title?: string;\n  };\n  setAttributes: (attributes: Partial<EditProps[\"attributes\"]>) => void;\n  clientId: string;\n  context: { [key: string]: any };\n  blockProps: any;\n}\n\nexport default function Edit({\n  attributes,\n  setAttributes,\n}: EditProps) {\n  const props = useBlockProps();\n\n  // Data for color options\n  const colorDataAlert = [\n    {\n      color: \"#e9edf2\",\n      slug: \"default\",\n      name: __(\"Default\", \"rrze-elements-blocks\"),\n    },\n    {\n      color: \"#dff0d8\",\n      slug: \"success\",\n      name: __(\"Success\", \"rrze-elements-blocks\"),\n    },\n    {\n      color: \"#d9edf7\",\n      slug: \"info\",\n      name: __(\"Info\", \"rrze-elements-blocks\"),\n    },\n    {\n      color: \"#fcf8e3\",\n      slug: \"warning\",\n      name: __(\"Warning\", \"rrze-elements-blocks\"),\n    },\n    {\n      color: \"#f2dede\",\n      slug: \"danger\",\n      name: __(\"Danger\", \"rrze-elements-blocks\"),\n    },\n  ];\n\n  let borderStyle = attributes.borderColor\n    ? { border: `1px solid ${attributes.borderColor}` }\n    : {};\n  if (attributes.style === \"example\") {\n    borderStyle = { border: `1px dashed var(--color-TextLight, #707070)` };\n  }\n\n  const { __unstableMarkNextChangeAsNotPersistent } =\n    useDispatch(blockEditorStore);\n  const onChangeTitle = (newText: string) => {\n    if (newText === \"\") {\n      __unstableMarkNextChangeAsNotPersistent();\n      setAttributes({ title: \"\", style:\"default\" });\n    } else {\n      __unstableMarkNextChangeAsNotPersistent();\n      setAttributes({ title: newText, style: \"example\"});\n    }\n  };\n\n  return (\n    <div {...props}>\n      <InspectorControls>\n        <StandardColorSwitcher\n          attributes={{ color: attributes.color }}\n          setAttributes={setAttributes}\n          colorData={colorDataAlert}\n          hex={true}\n          useStyle={true}\n          customColor={false}\n          useTextColor={true}\n        />\n        <ContrastChecker\n          textColor={attributes.textColor}\n          backgroundColor={attributes.color}\n        />\n\n        {attributes.style ? null : (\n          <BorderColorPicker\n            attributes={{ color: attributes.borderColor }}\n            setAttributes={setAttributes}\n          />\n        )}\n        <PanelBody\n          title={__(\"Label settings\", \"rrze-elements-blocks\")}\n          initialOpen={true}\n        >\n          <Spacer>\n            <Text>{__(\"Add a Label for your Alert. This changes the style to example\", \"rrze-elements-blocks\")}</Text>\n          </Spacer>\n\n          <TextControl\n            value={attributes.title}\n            onChange={onChangeTitle}\n            placeholder={__(\"Add a Label\", \"rrze-elements-blocks\")}\n            className=\"elements-blocks-input-following-icon\"\n          />\n        </PanelBody>\n      </InspectorControls>\n      <BlockControls>\n        <StandardColorSwitcherToolbar\n          attributes={{ color: attributes.color, style: attributes.style }}\n          setAttributes={setAttributes}\n          colorData={colorDataAlert}\n          hex={true}\n          useStyle={true}\n        />\n      </BlockControls>\n      <div\n        className={`alert clearfix clear ${\n          attributes.style ? `alert-${attributes.style}` : \"\"\n        }`}\n        style={{\n          ...(attributes.style\n            ? {}\n            : {\n                backgroundColor: attributes.color,\n                color: attributes.textColor,\n              }),\n          ...borderStyle,\n        }}\n        title={attributes.title}\n      >\n        <InnerBlocks\n          template={[\n            [\n              \"core/paragraph\",\n              { placeholder: __(\"Add a description…\", \"rrze-elements-blocks\") },\n            ],\n          ]}\n          allowedBlocks={[\"core/paragraph\", \"core/heading\", \"core/list\"]}\n          templateLock={false}\n        />\n      </div>\n    </div>\n  );\n}\n"
    },
    {
      "file": "src/blocks/alert/edit.tsx",
      "description": "InspectorControls as the Editor Sidebar panel",
      "line": 94,
      "contents": "import {\n  TextControl,\n  PanelBody,\n  __experimentalText as Text,\n  __experimentalSpacer as Spacer,\n} from \"@wordpress/components\";\nimport {\n  useBlockProps,\n  InnerBlocks,\n  InspectorControls,\n  BlockControls,\n  ContrastChecker,\n} from \"@wordpress/block-editor\";\n\nimport { __ } from \"@wordpress/i18n\";\nimport { useDispatch } from \"@wordpress/data\";\nimport { store as blockEditorStore } from \"@wordpress/block-editor\";\nimport {\n  StandardColorSwitcher,\n  StandardColorSwitcherToolbar,\n  BorderColorPicker,\n} from \"../../components/CustomColorSwitcher\";\n\ninterface EditProps {\n  attributes: {\n    style?: string;\n    color: string;\n    textColor?: string;\n    borderColor?: string;\n    title?: string;\n  };\n  setAttributes: (attributes: Partial<EditProps[\"attributes\"]>) => void;\n  clientId: string;\n  context: { [key: string]: any };\n  blockProps: any;\n}\n\nexport default function Edit({\n  attributes,\n  setAttributes,\n}: EditProps) {\n  const props = useBlockProps();\n\n  // Data for color options\n  const colorDataAlert = [\n    {\n      color: \"#e9edf2\",\n      slug: \"default\",\n      name: __(\"Default\", \"rrze-elements-blocks\"),\n    },\n    {\n      color: \"#dff0d8\",\n      slug: \"success\",\n      name: __(\"Success\", \"rrze-elements-blocks\"),\n    },\n    {\n      color: \"#d9edf7\",\n      slug: \"info\",\n      name: __(\"Info\", \"rrze-elements-blocks\"),\n    },\n    {\n      color: \"#fcf8e3\",\n      slug: \"warning\",\n      name: __(\"Warning\", \"rrze-elements-blocks\"),\n    },\n    {\n      color: \"#f2dede\",\n      slug: \"danger\",\n      name: __(\"Danger\", \"rrze-elements-blocks\"),\n    },\n  ];\n\n  let borderStyle = attributes.borderColor\n    ? { border: `1px solid ${attributes.borderColor}` }\n    : {};\n  if (attributes.style === \"example\") {\n    borderStyle = { border: `1px dashed var(--color-TextLight, #707070)` };\n  }\n\n  const { __unstableMarkNextChangeAsNotPersistent } =\n    useDispatch(blockEditorStore);\n  const onChangeTitle = (newText: string) => {\n    if (newText === \"\") {\n      __unstableMarkNextChangeAsNotPersistent();\n      setAttributes({ title: \"\", style:\"default\" });\n    } else {\n      __unstableMarkNextChangeAsNotPersistent();\n      setAttributes({ title: newText, style: \"example\"});\n    }\n  };\n\n  return (\n    <div {...props}>\n      <InspectorControls>\n        <StandardColorSwitcher\n          attributes={{ color: attributes.color }}\n          setAttributes={setAttributes}\n          colorData={colorDataAlert}\n          hex={true}\n          useStyle={true}\n          customColor={false}\n          useTextColor={true}\n        />\n        <ContrastChecker\n          textColor={attributes.textColor}\n          backgroundColor={attributes.color}\n        />\n\n        {attributes.style ? null : (\n          <BorderColorPicker\n            attributes={{ color: attributes.borderColor }}\n            setAttributes={setAttributes}\n          />\n        )}\n        <PanelBody\n          title={__(\"Label settings\", \"rrze-elements-blocks\")}\n          initialOpen={true}\n        >\n          <Spacer>\n            <Text>{__(\"Add a Label for your Alert. This changes the style to example\", \"rrze-elements-blocks\")}</Text>\n          </Spacer>\n\n          <TextControl\n            value={attributes.title}\n            onChange={onChangeTitle}\n            placeholder={__(\"Add a Label\", \"rrze-elements-blocks\")}\n            className=\"elements-blocks-input-following-icon\"\n          />\n        </PanelBody>\n      </InspectorControls>\n      <BlockControls>\n        <StandardColorSwitcherToolbar\n          attributes={{ color: attributes.color, style: attributes.style }}\n          setAttributes={setAttributes}\n          colorData={colorDataAlert}\n          hex={true}\n          useStyle={true}\n        />\n      </BlockControls>\n      <div\n        className={`alert clearfix clear ${\n          attributes.style ? `alert-${attributes.style}` : \"\"\n        }`}\n        style={{\n          ...(attributes.style\n            ? {}\n            : {\n                backgroundColor: attributes.color,\n                color: attributes.textColor,\n              }),\n          ...borderStyle,\n        }}\n        title={attributes.title}\n      >\n        <InnerBlocks\n          template={[\n            [\n              \"core/paragraph\",\n              { placeholder: __(\"Add a description…\", \"rrze-elements-blocks\") },\n            ],\n          ]}\n          allowedBlocks={[\"core/paragraph\", \"core/heading\", \"core/list\"]}\n          templateLock={false}\n        />\n      </div>\n    </div>\n  );\n}\n"
    },
    {
      "file": "src/blocks/alert/edit.tsx",
      "description": "Containing a StandardColorSwitcher (a custom component)",
      "line": 95,
      "contents": "import {\n  TextControl,\n  PanelBody,\n  __experimentalText as Text,\n  __experimentalSpacer as Spacer,\n} from \"@wordpress/components\";\nimport {\n  useBlockProps,\n  InnerBlocks,\n  InspectorControls,\n  BlockControls,\n  ContrastChecker,\n} from \"@wordpress/block-editor\";\n\nimport { __ } from \"@wordpress/i18n\";\nimport { useDispatch } from \"@wordpress/data\";\nimport { store as blockEditorStore } from \"@wordpress/block-editor\";\nimport {\n  StandardColorSwitcher,\n  StandardColorSwitcherToolbar,\n  BorderColorPicker,\n} from \"../../components/CustomColorSwitcher\";\n\ninterface EditProps {\n  attributes: {\n    style?: string;\n    color: string;\n    textColor?: string;\n    borderColor?: string;\n    title?: string;\n  };\n  setAttributes: (attributes: Partial<EditProps[\"attributes\"]>) => void;\n  clientId: string;\n  context: { [key: string]: any };\n  blockProps: any;\n}\n\nexport default function Edit({\n  attributes,\n  setAttributes,\n}: EditProps) {\n  const props = useBlockProps();\n\n  // Data for color options\n  const colorDataAlert = [\n    {\n      color: \"#e9edf2\",\n      slug: \"default\",\n      name: __(\"Default\", \"rrze-elements-blocks\"),\n    },\n    {\n      color: \"#dff0d8\",\n      slug: \"success\",\n      name: __(\"Success\", \"rrze-elements-blocks\"),\n    },\n    {\n      color: \"#d9edf7\",\n      slug: \"info\",\n      name: __(\"Info\", \"rrze-elements-blocks\"),\n    },\n    {\n      color: \"#fcf8e3\",\n      slug: \"warning\",\n      name: __(\"Warning\", \"rrze-elements-blocks\"),\n    },\n    {\n      color: \"#f2dede\",\n      slug: \"danger\",\n      name: __(\"Danger\", \"rrze-elements-blocks\"),\n    },\n  ];\n\n  let borderStyle = attributes.borderColor\n    ? { border: `1px solid ${attributes.borderColor}` }\n    : {};\n  if (attributes.style === \"example\") {\n    borderStyle = { border: `1px dashed var(--color-TextLight, #707070)` };\n  }\n\n  const { __unstableMarkNextChangeAsNotPersistent } =\n    useDispatch(blockEditorStore);\n  const onChangeTitle = (newText: string) => {\n    if (newText === \"\") {\n      __unstableMarkNextChangeAsNotPersistent();\n      setAttributes({ title: \"\", style:\"default\" });\n    } else {\n      __unstableMarkNextChangeAsNotPersistent();\n      setAttributes({ title: newText, style: \"example\"});\n    }\n  };\n\n  return (\n    <div {...props}>\n      <InspectorControls>\n        <StandardColorSwitcher\n          attributes={{ color: attributes.color }}\n          setAttributes={setAttributes}\n          colorData={colorDataAlert}\n          hex={true}\n          useStyle={true}\n          customColor={false}\n          useTextColor={true}\n        />\n        <ContrastChecker\n          textColor={attributes.textColor}\n          backgroundColor={attributes.color}\n        />\n\n        {attributes.style ? null : (\n          <BorderColorPicker\n            attributes={{ color: attributes.borderColor }}\n            setAttributes={setAttributes}\n          />\n        )}\n        <PanelBody\n          title={__(\"Label settings\", \"rrze-elements-blocks\")}\n          initialOpen={true}\n        >\n          <Spacer>\n            <Text>{__(\"Add a Label for your Alert. This changes the style to example\", \"rrze-elements-blocks\")}</Text>\n          </Spacer>\n\n          <TextControl\n            value={attributes.title}\n            onChange={onChangeTitle}\n            placeholder={__(\"Add a Label\", \"rrze-elements-blocks\")}\n            className=\"elements-blocks-input-following-icon\"\n          />\n        </PanelBody>\n      </InspectorControls>\n      <BlockControls>\n        <StandardColorSwitcherToolbar\n          attributes={{ color: attributes.color, style: attributes.style }}\n          setAttributes={setAttributes}\n          colorData={colorDataAlert}\n          hex={true}\n          useStyle={true}\n        />\n      </BlockControls>\n      <div\n        className={`alert clearfix clear ${\n          attributes.style ? `alert-${attributes.style}` : \"\"\n        }`}\n        style={{\n          ...(attributes.style\n            ? {}\n            : {\n                backgroundColor: attributes.color,\n                color: attributes.textColor,\n              }),\n          ...borderStyle,\n        }}\n        title={attributes.title}\n      >\n        <InnerBlocks\n          template={[\n            [\n              \"core/paragraph\",\n              { placeholder: __(\"Add a description…\", \"rrze-elements-blocks\") },\n            ],\n          ]}\n          allowedBlocks={[\"core/paragraph\", \"core/heading\", \"core/list\"]}\n          templateLock={false}\n        />\n      </div>\n    </div>\n  );\n}\n"
    },
    {
      "file": "src/blocks/alert/edit.tsx",
      "description": "WordPress' ContrastChecker Component",
      "line": 104,
      "contents": "import {\n  TextControl,\n  PanelBody,\n  __experimentalText as Text,\n  __experimentalSpacer as Spacer,\n} from \"@wordpress/components\";\nimport {\n  useBlockProps,\n  InnerBlocks,\n  InspectorControls,\n  BlockControls,\n  ContrastChecker,\n} from \"@wordpress/block-editor\";\n\nimport { __ } from \"@wordpress/i18n\";\nimport { useDispatch } from \"@wordpress/data\";\nimport { store as blockEditorStore } from \"@wordpress/block-editor\";\nimport {\n  StandardColorSwitcher,\n  StandardColorSwitcherToolbar,\n  BorderColorPicker,\n} from \"../../components/CustomColorSwitcher\";\n\ninterface EditProps {\n  attributes: {\n    style?: string;\n    color: string;\n    textColor?: string;\n    borderColor?: string;\n    title?: string;\n  };\n  setAttributes: (attributes: Partial<EditProps[\"attributes\"]>) => void;\n  clientId: string;\n  context: { [key: string]: any };\n  blockProps: any;\n}\n\nexport default function Edit({\n  attributes,\n  setAttributes,\n}: EditProps) {\n  const props = useBlockProps();\n\n  // Data for color options\n  const colorDataAlert = [\n    {\n      color: \"#e9edf2\",\n      slug: \"default\",\n      name: __(\"Default\", \"rrze-elements-blocks\"),\n    },\n    {\n      color: \"#dff0d8\",\n      slug: \"success\",\n      name: __(\"Success\", \"rrze-elements-blocks\"),\n    },\n    {\n      color: \"#d9edf7\",\n      slug: \"info\",\n      name: __(\"Info\", \"rrze-elements-blocks\"),\n    },\n    {\n      color: \"#fcf8e3\",\n      slug: \"warning\",\n      name: __(\"Warning\", \"rrze-elements-blocks\"),\n    },\n    {\n      color: \"#f2dede\",\n      slug: \"danger\",\n      name: __(\"Danger\", \"rrze-elements-blocks\"),\n    },\n  ];\n\n  let borderStyle = attributes.borderColor\n    ? { border: `1px solid ${attributes.borderColor}` }\n    : {};\n  if (attributes.style === \"example\") {\n    borderStyle = { border: `1px dashed var(--color-TextLight, #707070)` };\n  }\n\n  const { __unstableMarkNextChangeAsNotPersistent } =\n    useDispatch(blockEditorStore);\n  const onChangeTitle = (newText: string) => {\n    if (newText === \"\") {\n      __unstableMarkNextChangeAsNotPersistent();\n      setAttributes({ title: \"\", style:\"default\" });\n    } else {\n      __unstableMarkNextChangeAsNotPersistent();\n      setAttributes({ title: newText, style: \"example\"});\n    }\n  };\n\n  return (\n    <div {...props}>\n      <InspectorControls>\n        <StandardColorSwitcher\n          attributes={{ color: attributes.color }}\n          setAttributes={setAttributes}\n          colorData={colorDataAlert}\n          hex={true}\n          useStyle={true}\n          customColor={false}\n          useTextColor={true}\n        />\n        <ContrastChecker\n          textColor={attributes.textColor}\n          backgroundColor={attributes.color}\n        />\n\n        {attributes.style ? null : (\n          <BorderColorPicker\n            attributes={{ color: attributes.borderColor }}\n            setAttributes={setAttributes}\n          />\n        )}\n        <PanelBody\n          title={__(\"Label settings\", \"rrze-elements-blocks\")}\n          initialOpen={true}\n        >\n          <Spacer>\n            <Text>{__(\"Add a Label for your Alert. This changes the style to example\", \"rrze-elements-blocks\")}</Text>\n          </Spacer>\n\n          <TextControl\n            value={attributes.title}\n            onChange={onChangeTitle}\n            placeholder={__(\"Add a Label\", \"rrze-elements-blocks\")}\n            className=\"elements-blocks-input-following-icon\"\n          />\n        </PanelBody>\n      </InspectorControls>\n      <BlockControls>\n        <StandardColorSwitcherToolbar\n          attributes={{ color: attributes.color, style: attributes.style }}\n          setAttributes={setAttributes}\n          colorData={colorDataAlert}\n          hex={true}\n          useStyle={true}\n        />\n      </BlockControls>\n      <div\n        className={`alert clearfix clear ${\n          attributes.style ? `alert-${attributes.style}` : \"\"\n        }`}\n        style={{\n          ...(attributes.style\n            ? {}\n            : {\n                backgroundColor: attributes.color,\n                color: attributes.textColor,\n              }),\n          ...borderStyle,\n        }}\n        title={attributes.title}\n      >\n        <InnerBlocks\n          template={[\n            [\n              \"core/paragraph\",\n              { placeholder: __(\"Add a description…\", \"rrze-elements-blocks\") },\n            ],\n          ]}\n          allowedBlocks={[\"core/paragraph\", \"core/heading\", \"core/list\"]}\n          templateLock={false}\n        />\n      </div>\n    </div>\n  );\n}\n"
    },
    {
      "file": "src/blocks/alert/edit.tsx",
      "description": "BlockControls, die Block-Werkzeugleiste über dem Block",
      "line": 131,
      "contents": "import {\n  TextControl,\n  PanelBody,\n  __experimentalText as Text,\n  __experimentalSpacer as Spacer,\n} from \"@wordpress/components\";\nimport {\n  useBlockProps,\n  InnerBlocks,\n  InspectorControls,\n  BlockControls,\n  ContrastChecker,\n} from \"@wordpress/block-editor\";\n\nimport { __ } from \"@wordpress/i18n\";\nimport { useDispatch } from \"@wordpress/data\";\nimport { store as blockEditorStore } from \"@wordpress/block-editor\";\nimport {\n  StandardColorSwitcher,\n  StandardColorSwitcherToolbar,\n  BorderColorPicker,\n} from \"../../components/CustomColorSwitcher\";\n\ninterface EditProps {\n  attributes: {\n    style?: string;\n    color: string;\n    textColor?: string;\n    borderColor?: string;\n    title?: string;\n  };\n  setAttributes: (attributes: Partial<EditProps[\"attributes\"]>) => void;\n  clientId: string;\n  context: { [key: string]: any };\n  blockProps: any;\n}\n\nexport default function Edit({\n  attributes,\n  setAttributes,\n}: EditProps) {\n  const props = useBlockProps();\n\n  // Data for color options\n  const colorDataAlert = [\n    {\n      color: \"#e9edf2\",\n      slug: \"default\",\n      name: __(\"Default\", \"rrze-elements-blocks\"),\n    },\n    {\n      color: \"#dff0d8\",\n      slug: \"success\",\n      name: __(\"Success\", \"rrze-elements-blocks\"),\n    },\n    {\n      color: \"#d9edf7\",\n      slug: \"info\",\n      name: __(\"Info\", \"rrze-elements-blocks\"),\n    },\n    {\n      color: \"#fcf8e3\",\n      slug: \"warning\",\n      name: __(\"Warning\", \"rrze-elements-blocks\"),\n    },\n    {\n      color: \"#f2dede\",\n      slug: \"danger\",\n      name: __(\"Danger\", \"rrze-elements-blocks\"),\n    },\n  ];\n\n  let borderStyle = attributes.borderColor\n    ? { border: `1px solid ${attributes.borderColor}` }\n    : {};\n  if (attributes.style === \"example\") {\n    borderStyle = { border: `1px dashed var(--color-TextLight, #707070)` };\n  }\n\n  const { __unstableMarkNextChangeAsNotPersistent } =\n    useDispatch(blockEditorStore);\n  const onChangeTitle = (newText: string) => {\n    if (newText === \"\") {\n      __unstableMarkNextChangeAsNotPersistent();\n      setAttributes({ title: \"\", style:\"default\" });\n    } else {\n      __unstableMarkNextChangeAsNotPersistent();\n      setAttributes({ title: newText, style: \"example\"});\n    }\n  };\n\n  return (\n    <div {...props}>\n      <InspectorControls>\n        <StandardColorSwitcher\n          attributes={{ color: attributes.color }}\n          setAttributes={setAttributes}\n          colorData={colorDataAlert}\n          hex={true}\n          useStyle={true}\n          customColor={false}\n          useTextColor={true}\n        />\n        <ContrastChecker\n          textColor={attributes.textColor}\n          backgroundColor={attributes.color}\n        />\n\n        {attributes.style ? null : (\n          <BorderColorPicker\n            attributes={{ color: attributes.borderColor }}\n            setAttributes={setAttributes}\n          />\n        )}\n        <PanelBody\n          title={__(\"Label settings\", \"rrze-elements-blocks\")}\n          initialOpen={true}\n        >\n          <Spacer>\n            <Text>{__(\"Add a Label for your Alert. This changes the style to example\", \"rrze-elements-blocks\")}</Text>\n          </Spacer>\n\n          <TextControl\n            value={attributes.title}\n            onChange={onChangeTitle}\n            placeholder={__(\"Add a Label\", \"rrze-elements-blocks\")}\n            className=\"elements-blocks-input-following-icon\"\n          />\n        </PanelBody>\n      </InspectorControls>\n      <BlockControls>\n        <StandardColorSwitcherToolbar\n          attributes={{ color: attributes.color, style: attributes.style }}\n          setAttributes={setAttributes}\n          colorData={colorDataAlert}\n          hex={true}\n          useStyle={true}\n        />\n      </BlockControls>\n      <div\n        className={`alert clearfix clear ${\n          attributes.style ? `alert-${attributes.style}` : \"\"\n        }`}\n        style={{\n          ...(attributes.style\n            ? {}\n            : {\n                backgroundColor: attributes.color,\n                color: attributes.textColor,\n              }),\n          ...borderStyle,\n        }}\n        title={attributes.title}\n      >\n        <InnerBlocks\n          template={[\n            [\n              \"core/paragraph\",\n              { placeholder: __(\"Add a description…\", \"rrze-elements-blocks\") },\n            ],\n          ]}\n          allowedBlocks={[\"core/paragraph\", \"core/heading\", \"core/list\"]}\n          templateLock={false}\n        />\n      </div>\n    </div>\n  );\n}\n"
    },
    {
      "file": "src/blocks/alert/edit.tsx",
      "description": "Output of inner blocks via InnerBlocks. This allows interacting and adding other blocks inside the block's content.",
      "line": 155,
      "contents": "import {\n  TextControl,\n  PanelBody,\n  __experimentalText as Text,\n  __experimentalSpacer as Spacer,\n} from \"@wordpress/components\";\nimport {\n  useBlockProps,\n  InnerBlocks,\n  InspectorControls,\n  BlockControls,\n  ContrastChecker,\n} from \"@wordpress/block-editor\";\n\nimport { __ } from \"@wordpress/i18n\";\nimport { useDispatch } from \"@wordpress/data\";\nimport { store as blockEditorStore } from \"@wordpress/block-editor\";\nimport {\n  StandardColorSwitcher,\n  StandardColorSwitcherToolbar,\n  BorderColorPicker,\n} from \"../../components/CustomColorSwitcher\";\n\ninterface EditProps {\n  attributes: {\n    style?: string;\n    color: string;\n    textColor?: string;\n    borderColor?: string;\n    title?: string;\n  };\n  setAttributes: (attributes: Partial<EditProps[\"attributes\"]>) => void;\n  clientId: string;\n  context: { [key: string]: any };\n  blockProps: any;\n}\n\nexport default function Edit({\n  attributes,\n  setAttributes,\n}: EditProps) {\n  const props = useBlockProps();\n\n  // Data for color options\n  const colorDataAlert = [\n    {\n      color: \"#e9edf2\",\n      slug: \"default\",\n      name: __(\"Default\", \"rrze-elements-blocks\"),\n    },\n    {\n      color: \"#dff0d8\",\n      slug: \"success\",\n      name: __(\"Success\", \"rrze-elements-blocks\"),\n    },\n    {\n      color: \"#d9edf7\",\n      slug: \"info\",\n      name: __(\"Info\", \"rrze-elements-blocks\"),\n    },\n    {\n      color: \"#fcf8e3\",\n      slug: \"warning\",\n      name: __(\"Warning\", \"rrze-elements-blocks\"),\n    },\n    {\n      color: \"#f2dede\",\n      slug: \"danger\",\n      name: __(\"Danger\", \"rrze-elements-blocks\"),\n    },\n  ];\n\n  let borderStyle = attributes.borderColor\n    ? { border: `1px solid ${attributes.borderColor}` }\n    : {};\n  if (attributes.style === \"example\") {\n    borderStyle = { border: `1px dashed var(--color-TextLight, #707070)` };\n  }\n\n  const { __unstableMarkNextChangeAsNotPersistent } =\n    useDispatch(blockEditorStore);\n  const onChangeTitle = (newText: string) => {\n    if (newText === \"\") {\n      __unstableMarkNextChangeAsNotPersistent();\n      setAttributes({ title: \"\", style:\"default\" });\n    } else {\n      __unstableMarkNextChangeAsNotPersistent();\n      setAttributes({ title: newText, style: \"example\"});\n    }\n  };\n\n  return (\n    <div {...props}>\n      <InspectorControls>\n        <StandardColorSwitcher\n          attributes={{ color: attributes.color }}\n          setAttributes={setAttributes}\n          colorData={colorDataAlert}\n          hex={true}\n          useStyle={true}\n          customColor={false}\n          useTextColor={true}\n        />\n        <ContrastChecker\n          textColor={attributes.textColor}\n          backgroundColor={attributes.color}\n        />\n\n        {attributes.style ? null : (\n          <BorderColorPicker\n            attributes={{ color: attributes.borderColor }}\n            setAttributes={setAttributes}\n          />\n        )}\n        <PanelBody\n          title={__(\"Label settings\", \"rrze-elements-blocks\")}\n          initialOpen={true}\n        >\n          <Spacer>\n            <Text>{__(\"Add a Label for your Alert. This changes the style to example\", \"rrze-elements-blocks\")}</Text>\n          </Spacer>\n\n          <TextControl\n            value={attributes.title}\n            onChange={onChangeTitle}\n            placeholder={__(\"Add a Label\", \"rrze-elements-blocks\")}\n            className=\"elements-blocks-input-following-icon\"\n          />\n        </PanelBody>\n      </InspectorControls>\n      <BlockControls>\n        <StandardColorSwitcherToolbar\n          attributes={{ color: attributes.color, style: attributes.style }}\n          setAttributes={setAttributes}\n          colorData={colorDataAlert}\n          hex={true}\n          useStyle={true}\n        />\n      </BlockControls>\n      <div\n        className={`alert clearfix clear ${\n          attributes.style ? `alert-${attributes.style}` : \"\"\n        }`}\n        style={{\n          ...(attributes.style\n            ? {}\n            : {\n                backgroundColor: attributes.color,\n                color: attributes.textColor,\n              }),\n          ...borderStyle,\n        }}\n        title={attributes.title}\n      >\n        <InnerBlocks\n          template={[\n            [\n              \"core/paragraph\",\n              { placeholder: __(\"Add a description…\", \"rrze-elements-blocks\") },\n            ],\n          ]}\n          allowedBlocks={[\"core/paragraph\", \"core/heading\", \"core/list\"]}\n          templateLock={false}\n        />\n      </div>\n    </div>\n  );\n}\n"
    },
    {
      "file": "src/blocks/alert/edit.tsx",
      "description": "This is used, to tell the BlockEditor to NOT create a Undo-Layer after updating the attribute.\n\nElse blocks might create a almost endless Undo-Layer-cycle which prevents users from going back via Ctrl+Z ",
      "line": 84,
      "contents": "import {\n  TextControl,\n  PanelBody,\n  __experimentalText as Text,\n  __experimentalSpacer as Spacer,\n} from \"@wordpress/components\";\nimport {\n  useBlockProps,\n  InnerBlocks,\n  InspectorControls,\n  BlockControls,\n  ContrastChecker,\n} from \"@wordpress/block-editor\";\n\nimport { __ } from \"@wordpress/i18n\";\nimport { useDispatch } from \"@wordpress/data\";\nimport { store as blockEditorStore } from \"@wordpress/block-editor\";\nimport {\n  StandardColorSwitcher,\n  StandardColorSwitcherToolbar,\n  BorderColorPicker,\n} from \"../../components/CustomColorSwitcher\";\n\ninterface EditProps {\n  attributes: {\n    style?: string;\n    color: string;\n    textColor?: string;\n    borderColor?: string;\n    title?: string;\n  };\n  setAttributes: (attributes: Partial<EditProps[\"attributes\"]>) => void;\n  clientId: string;\n  context: { [key: string]: any };\n  blockProps: any;\n}\n\nexport default function Edit({\n  attributes,\n  setAttributes,\n}: EditProps) {\n  const props = useBlockProps();\n\n  // Data for color options\n  const colorDataAlert = [\n    {\n      color: \"#e9edf2\",\n      slug: \"default\",\n      name: __(\"Default\", \"rrze-elements-blocks\"),\n    },\n    {\n      color: \"#dff0d8\",\n      slug: \"success\",\n      name: __(\"Success\", \"rrze-elements-blocks\"),\n    },\n    {\n      color: \"#d9edf7\",\n      slug: \"info\",\n      name: __(\"Info\", \"rrze-elements-blocks\"),\n    },\n    {\n      color: \"#fcf8e3\",\n      slug: \"warning\",\n      name: __(\"Warning\", \"rrze-elements-blocks\"),\n    },\n    {\n      color: \"#f2dede\",\n      slug: \"danger\",\n      name: __(\"Danger\", \"rrze-elements-blocks\"),\n    },\n  ];\n\n  let borderStyle = attributes.borderColor\n    ? { border: `1px solid ${attributes.borderColor}` }\n    : {};\n  if (attributes.style === \"example\") {\n    borderStyle = { border: `1px dashed var(--color-TextLight, #707070)` };\n  }\n\n  const { __unstableMarkNextChangeAsNotPersistent } =\n    useDispatch(blockEditorStore);\n  const onChangeTitle = (newText: string) => {\n    if (newText === \"\") {\n      __unstableMarkNextChangeAsNotPersistent();\n      setAttributes({ title: \"\", style:\"default\" });\n    } else {\n      __unstableMarkNextChangeAsNotPersistent();\n      setAttributes({ title: newText, style: \"example\"});\n    }\n  };\n\n  return (\n    <div {...props}>\n      <InspectorControls>\n        <StandardColorSwitcher\n          attributes={{ color: attributes.color }}\n          setAttributes={setAttributes}\n          colorData={colorDataAlert}\n          hex={true}\n          useStyle={true}\n          customColor={false}\n          useTextColor={true}\n        />\n        <ContrastChecker\n          textColor={attributes.textColor}\n          backgroundColor={attributes.color}\n        />\n\n        {attributes.style ? null : (\n          <BorderColorPicker\n            attributes={{ color: attributes.borderColor }}\n            setAttributes={setAttributes}\n          />\n        )}\n        <PanelBody\n          title={__(\"Label settings\", \"rrze-elements-blocks\")}\n          initialOpen={true}\n        >\n          <Spacer>\n            <Text>{__(\"Add a Label for your Alert. This changes the style to example\", \"rrze-elements-blocks\")}</Text>\n          </Spacer>\n\n          <TextControl\n            value={attributes.title}\n            onChange={onChangeTitle}\n            placeholder={__(\"Add a Label\", \"rrze-elements-blocks\")}\n            className=\"elements-blocks-input-following-icon\"\n          />\n        </PanelBody>\n      </InspectorControls>\n      <BlockControls>\n        <StandardColorSwitcherToolbar\n          attributes={{ color: attributes.color, style: attributes.style }}\n          setAttributes={setAttributes}\n          colorData={colorDataAlert}\n          hex={true}\n          useStyle={true}\n        />\n      </BlockControls>\n      <div\n        className={`alert clearfix clear ${\n          attributes.style ? `alert-${attributes.style}` : \"\"\n        }`}\n        style={{\n          ...(attributes.style\n            ? {}\n            : {\n                backgroundColor: attributes.color,\n                color: attributes.textColor,\n              }),\n          ...borderStyle,\n        }}\n        title={attributes.title}\n      >\n        <InnerBlocks\n          template={[\n            [\n              \"core/paragraph\",\n              { placeholder: __(\"Add a description…\", \"rrze-elements-blocks\") },\n            ],\n          ]}\n          allowedBlocks={[\"core/paragraph\", \"core/heading\", \"core/list\"]}\n          templateLock={false}\n        />\n      </div>\n    </div>\n  );\n}\n"
    },
    {
      "directory": "src/components",
      "description": "All custom written components are stored inside src/components for global use inside the project."
    },
    {
      "directory": "src/stores",
      "description": "All custom stores are placed inside src/stores. Redux."
    },
    {
      "file": "package.json",
      "description": "Do not forget to ```npm run build-all``` or ```npm run build``` after adding your changes.",
      "line": 17,
      "contents": "{\n\t\"name\": \"rrze-elements\",\n\t\"version\": \"1.0.14\",\n\t\"description\": \"RRZE Elements: Gestalterische Erweiterungen für den BlockEditor\",\n\t\"main\": \"build/index.js\",\n\t\"textdomain\": \"rrze-elements-blocks\",\n\t\"license\": \"GPL-3.0-or-later\",\n\t\"private\": true,\n\t\"scripts\": {\n\t\t\"build\": \"wp-scripts build\",\n\t\t\"format\": \"wp-scripts format\",\n\t\t\"lint:css\": \"wp-scripts lint-style\",\n\t\t\"lint\": \"eslint 'src/**/*.{js,jsx,ts,tsx}'\",\n\t\t\"packages-update\": \"wp-scripts packages-update\",\n\t\t\"plugin-zip\": \"wp-scripts plugin-zip\",\n\t\t\"start\": \"wp-scripts start\",\n\t\t\"build-all\": \"node check-compatibility.js && sass src/_shared/scss/rrze-elements-blocks.scss assets/css/rrze-elements-blocks.css && npm run build && npx playwright test\",\n\t\t\"update-version\": \"node update-version.js && npm run build\"\n\t},\n\t\"repository\": {\n\t\t\"type\": \"git\",\n\t\t\"url\": \"https://github.com/RRZE-Webteam/rrze-elements\",\n\t\t\"issues\": \"https://github.com/RRZE-Webteam/rrze-elements/issues\",\n\t\t\"clone\": \"git+https://github.com/RRZE-Webteam/rrze-elements.git\"\n\t},\n\t\"browserslist\": [\n\t\t\"last 3 years\",\n\t\t\"ie 11\"\n\t],\n\t\"supports\": {\n\t\t\"email\": \"webmaster@fau.de\",\n\t\t\"docs\": \"https://www.wordpress.rrze.fau.de/plugins/fau-und-rrze-plugins/elements/\"\n\t},\n\t\"author\": {\n\t\t\"name\": \"RRZE-Webteam <webmaster@fau.de>\",\n\t\t\"url\": \"https://www.wordpress.rrze.fau.de/person/webmaster\"\n\t},\n\t\"devDependencies\": {\n\t\t\"@babel/core\": \"^7.26.0\",\n\t\t\"@babel/preset-env\": \"^7.26.0\",\n\t\t\"@babel/preset-react\": \"^7.26.3\",\n\t\t\"@eslint/eslintrc\": \"^3.2.0\",\n\t\t\"@eslint/js\": \"^9.16.0\",\n\t\t\"@playwright/test\": \"^1.49.1\",\n\t\t\"@svgr/webpack\": \"^8.1.0\",\n\t\t\"@types/color\": \"^4.2.0\",\n\t\t\"@types/lodash\": \"^4.17.13\",\n\t\t\"@types/node\": \"^22.10.2\",\n\t\t\"@types/wordpress__block-editor\": \"^11.5.16\",\n\t\t\"@types/wordpress__blocks\": \"^12.5.16\",\n\t\t\"@typescript-eslint/eslint-plugin\": \"^8.18.0\",\n\t\t\"@typescript-eslint/parser\": \"^8.18.0\",\n\t\t\"@wordpress/api-fetch\": \"^7.14.0\",\n\t\t\"@wordpress/babel-plugin-makepot\": \"^6.14.0\",\n\t\t\"@wordpress/compose\": \"^7.14.0\",\n\t\t\"@wordpress/data\": \"^10.14.0\",\n\t\t\"@wordpress/e2e-test-utils-playwright\": \"^1.14.0\",\n\t\t\"@wordpress/eslint-plugin\": \"^22.0.0\",\n\t\t\"@wordpress/i18n\": \"^5.14.0\",\n\t\t\"@wordpress/icons\": \"^10.14.0\",\n\t\t\"@wordpress/keycodes\": \"^4.14.0\",\n\t\t\"@wordpress/notices\": \"^5.14.0\",\n\t\t\"@wordpress/scripts\": \"^30.7.0\",\n\t\t\"@wordpress/server-side-render\": \"^5.14.0\",\n\t\t\"autoprefixer\": \"^10.4.20\",\n\t\t\"babel-loader\": \"^9.2.1\",\n\t\t\"dotenv\": \"^16.4.7\",\n\t\t\"eslint\": \"^9.16.0\",\n\t\t\"eslint-plugin-react\": \"^7.37.2\",\n\t\t\"eslint-plugin-tsdoc\": \"^0.4.0\",\n\t\t\"inquirer\": \"^12.2.0\",\n\t\t\"prompt\": \"^1.3.0\",\n\t\t\"semver\": \"^7.6.3\",\n\t\t\"ts-loader\": \"^9.5.1\",\n\t\t\"typescript\": \"^5.7.2\"\n\t},\n\t\"dependencies\": {\n\t\t\"@wordpress/a11y\": \"^4.14.0\",\n\t\t\"@wordpress/shortcode\": \"^4.14.0\",\n\t\t\"color\": \"^4.2.3\",\n\t\t\"gsap\": \"^3.12.5\",\n\t\t\"lodash\": \"^4.17.21\",\n\t\t\"react-error-boundary\": \"^4.1.2\"\n\t},\n\t\"resolutions\": {\n\t\t\"postcss\": \"8.4.38\",\n\t\t\"svg-baker\": \"1.7.0\",\n\t\t\"svg-baker-runtime\": \"1.4.7\"\n\t},\n\t\"engines\": {\n\t\t\"node\": \">=21.7.3\",\n\t\t\"npm\": \">=10.8.0\"\n\t}\n}\n"
    }
  ]
}